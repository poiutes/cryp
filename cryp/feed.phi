#this code is the plumbing for cryp. It fetches live data, cleans it,
#and loads it into tensors for nets.

import requests
import time
import torch
import pandas
import numpy

url = 'https://api.coindesk.com/v1/bpi/currentprice.json'

class Feed
	#gets current bitcoin price
	def price self
		response = requests.get url
		response_json = response.json null

		return response_json['bpi']['USD']['rate']

	#creates a list of bitcoin prices seperated by a time interval
	# e.g. [100 110 109 104 112] where each price is say 20 secs apart
	def feed self length seconds
		chunk = []
		i = 1
		#time_until_end = mul seconds length
		total = length
		inc length
		until i = length
			time.sleep seconds
			bprice = self.price null
			bprice = bprice.replace ',' ''
			print 'net price input' i 'of' total ':' bprice
			chunk.append bprice
			#time_until_end = sub time_until_end seconds
			inc i
		#print 'chunk'
		#print chunk
		return chunk
	
	#takes a list of bitcoin prices and makes it into 
	#a list of price differences from some point in that list
	#e.g. say we have [100 110 109 104 112] and we choose the third
	#price which we want to know the differences from. We would get
	#[-9 1 0 -5 3]
	def normalize self chunk start
		i = 0
		base = chunk[start]
		base = base.replace ',' ''
		base = float base
		until i = len chunk
			num = chunk[i]
			num = float num
			#make float significant to a digit
			num = sub num base
			num = round num 4
			num = str num
			#print num
			chunk[i] = num
			inc i
		#print chunk
		return chunk

	#Takes a list of btc prices and determines if the price goes
	#up or down from some point to the end. It then exports this data to a csv.
	#A nets expected output values is either [0 1] or [1 0] (price went up or down)
	def chunk2eos_csv self chunk start eos_csv
		length = len chunk
		end = sub length 1
		eo = [0.0 0.0]
		trade_window = chunk[start:end]
		i = 0
		up = 0 
		until i = len trade_window
			if trade_window[0] < trade_window[i]
				up = 1
			inc i

		if up = 1
			eo[1] = 1.0

		if up = 0
			eo[0] = 1.0
			
		eo[0] = str eo[0]
		eo[1] = str eo[1]
		
		f = open eos_csv 'a'
		f.write '\n'
		f.write eo[0]
		f.write ','
		f.write eo[1]
		f.close null

	#exports a python list to csv file which will later be
	#uploaded to a neural net as its input
	def chunk2ins_csv self chunk end ins_csv
		ins = chunk[0:end]
		f = open ins_csv 'a'
		f.write '\n'
		i = 0
		end = len ins
		end = sub end 1
		until i = end
			f.write ins[i]
			f.write ','
			inc i
		f.write ins[i]
		f.close null


	#exports price data to a csv file
	def chunk2raw_csv self chunk raw_csv 
		f = open raw_csv 'a'
		f.write '\n'
		i = 0
		end = len chunk 
		end = sub end 1
		until i = end
			f.write chunk[i]
			f.write ','
			inc i
		f.write chunk[i]
		f.close null

	#exports price data to a csv file (creates comma instead
	# of newline though when opening csv)
	def chunk2raw_csv_no_newline self chunk raw_csv 
		f = open raw_csv 'a'
		f.write ','
		i = 0
		end = len chunk 
		end = sub end 1
		until i = end
			f.write chunk[i]
			f.write ','
			inc i
		f.write chunk[i]
		f.close null

	#loads inputs and expected outputs into tensors from their respective
	#csv files
	def load self inputs_csv eos_csv batch_size
		inputs = pandas.read_csv inputs_csv
		#print inputs
		inputs = inputs.values
		#print 'empty'
		#print inputs

		eos = pandas.read_csv eos_csv
		eos = eos.values
		#print eos
		#print inputs
		i = 0
		j = batch_size
		tensdata = []
		#print eos.shape
		length = eos.shape[0]
		#print length 'al;dfjakldfjajkdsfajd'
		until length < j
			tens1 = inputs[i:j]
			#print tens1 i j
			tens1 = torch.from_numpy tens1
			tens1 = tens1.float null
			#print 'huh?'
			#print tens1
			
			tens2 = eos[i:j]
			tens2 = torch.from_numpy tens2
			tens2 = tens2.float null
			#print tens2
			tenslist = [tens1 tens2]
			#print tenslist
			tensdata.append tenslist
			i = add i batch_size
			j = add j batch_size

		return tensdata