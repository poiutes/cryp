#Runs a neural net that trades bitcoin live. 

import nn
import torch
import feed
import pandas
import numpy
import time


#initialize net
net = nn.Net null
path = torch.load 'data/nets/hellyeah2.pth'
net.load_state_dict path

print 'net initialized' '\n'

#initializes dataset for one round of inputs through net
x = feed.Feed null

print 'financial data feed initalized' '\n'

start_flag = 0 
until 1 = 0
	print '150 seconds until trade event' '\n'
	ins = x.feed 15 10
	
	if start_flag = 0 
		start_price = ins[0]
		start_price = float start_price
		bank = start_price
		market_start = start_price
		inc start_flag

	buy_price = float ins[14]
	

	ins = x.normalize ins 14
	j = 0 
	until j = 15
		ins[j] = float ins[j]
		inc j
	
	ins = [ins]
	#print ins

	ins = numpy.array ins

	correct = 0
	total = 0
	with torch.no_grad null 
		
		ins = torch.from_numpy ins
		ins = ins.float null
		#print ins
	
		outputs = net ins
		
		#print outputs

	
	#do nothing condition
	if outputs[0][0] > outputs[0][1]
		sell_price = buy_price
		print '\n' 'trade event: net says do not buy'

	#buy condition
	if outputs[0][0] <= outputs[0][1]
		print '\n' 'trade event: net says buy' bank 'dollars of BTC at' buy_price '\n'
	
		
		j = 0
		profit_flag = 0
		until j = 5
			time.sleep 10
			sell_price = x.price null
			sell_price = sell_price.replace ',' ''
			sell_price = float sell_price
			print 'current price:' sell_price
			if sell_price > buy_price
				print '\n' 'profitable_trade: bought' bank 'dollars of BTC at' buy_price '| sold' bank 'BTC at' sell_price
				j = 4
				profit_flag = 1
			inc j

		if profit_flag = 0
			if buy_price = sell_price
				print '\n' 'neutral trade: bought' bank 'dollars of BTC at' buy_price '| sold' bank 'BTC at' sell_price

			if buy_price > sell_price
				print '\n' 'loss on trade: bought' bank 'dollars of BTC at' buy_price '| sold' bank 'BTC at' sell_price		

		profit = div sell_price buy_price
		bank = mul profit bank

	print '\n'
#	percent = div correct total
#	percent = mul percent 100
#	print 'percent_right:' percent '%'
	print 'bank:' bank
	market = sell_price
	print 'current market price:' market
	print 'market start:' market_start
	performance = div bank market
	print 'performance against current market price:' performance
	percent_return = div bank market_start
	print 'percent return on initial investment:' percent_return
	print '\n'