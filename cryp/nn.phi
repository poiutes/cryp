#initializes and trains a neural net with 15 inputs (changes in price from 6th most recent 
#bitcoin price) and two expected outputs (does the price go up or down within the last 
#five bitcoin prices. 

import feed
import torch
import torch.nn as nn
import torch.nn.functional as F


class Net nn.Module
	def __init__ self
		super Net self
		self.fc1 = nn.Linear 15 40
		self.fc2 = nn.Linear 40 2
	
	def forward self x
		x = self.fc1 x
		x = F.relu x
		x = self.fc2 x
		return x

def train dataset
	net = Net null
	criterion = nn.MSELoss null
	epoch = 2
	k = 1
	until k = epoch
		running_loss = 0.0
		i = 0 
		until i = len dataset
			inputs = dataset[i][0]
			eos = dataset[i][1]	

			outputs = net inputs
			#print outputs
			#print eos
			outputs.float null
			eos.float null
			loss = criterion outputs eos
			loss.backward null

			a = loss.item null
			running_loss = add running_loss a
			if 1999 = mod i 2000
				a = add i 1
				b = div running_loss 2000
				print '[' epoch a '] loss' b
				running_loss = 0.0
			inc i
		inc k
	testnet1 = net.state_dict null
	torch.save testnet1 './testnet2.pth'
	
def run null		
	x = feed.Feed null
	dataset = x.load 'data/training_data/trainingins.csv' 'data/training_data/trainingeos.csv' 4
	#print 'hey'
	#print dataset
	train dataset
	print 'Finished Training'
	
#run null
